{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPVLvyNVIkcw89F3FIDhl3M",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/talon-b19/Project/blob/main/Ev_preds\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4wqIkTJlQiP-"
      },
      "outputs": [],
      "source": [
        "import streamlit as st\n",
        "import numpy as np\n",
        "import joblib\n",
        "\n",
        "## Load pre trained models\n",
        "try:\n",
        "    scaler = joblib.load(\"scalerEV.pkl\")\n",
        "    models = joblib.load(\"lr.model.pkl\")\n",
        "    model_loaded = True\n",
        "except Exception as e:\n",
        "    model_loaded = False\n",
        "    st.error(f\"Error loading model or scaler:{e}\")\n",
        "\n",
        "## Defining list\n",
        "if model_loaded:\n",
        "    counties = ['King','Yakima','Thurston','Snohomish','Island','Kitsap','Whitman','Skagit','Kittitas','Walla Walla','Spokane','Chelan','Grant','Stevens','Clark','Douglas','Pierce','Jefferson','Cowlitz','Clallam','Benton',\n",
        "                'Lewis','Klickitat','Grays Harbor','Asotin','San Juan','Whatcom','Franklin','Okanogan','Mason','Skamania','Pacific','Pend Oreille','Columbia','Wahkiakum','Marin','Adams','Lake','San Diego','Lincoln'\n",
        "                'Platte' ,'Kern' ,'Maricopa' ,'Goochland' ,'Orange' ,'Oldham' 'Hoke',\n",
        "                'Anne Arundel' ,'Frederick' ,'District of Columbia', 'Laramie' ,'Los Angeles',\n",
        "               'Contra Costa', 'DeKalb' ,'Madison' ,'Ferry' ,'Multnomah' ,'Stafford',\n",
        "                'Sarasota' ,'Garfield' ,'Calvert' ,'Harrison' ,'San Bernardino' ,'Bexar',\n",
        "                'Carroll' ,'Riverside' ,'Lee' ,'Hawaii' ,'Santa Clara' ,'Nueces' ,'Kings',\n",
        "                'Cumberland' ,'Hillsborough' ,'El Paso' ,'Santa Barbara' ,'New Haven',\n",
        "                'Vernon' ,'Chesapeake' ,'Polk' ,'Ray' ,'Wichita' ,'Yellowstone' ,'Kauai',\n",
        "                'Fairfax' ,'Harnett' ,'Houston' ,'Sacramento' ,'Santa Cruz' ,'Loudoun',\n",
        "                'Dallas' ,'Saratoga' ,'Burlington' ,'Williamsburg' ,'Rock Island' ,'Hamilton',\n",
        "                'Kent' ,'Deschutes' ,'Rockdale' ,'Honolulu' ,'Ventura' ,'Cook',\n",
        "                'Virginia Beach' ,'Philadelphia' ,'New London' ,'Alexandria',\n",
        "               \"Prince George's\" ,'Alameda' ,'Montgomery' ,\"St. Mary's\" ,'Onslow' ,'Norfolk',\n",
        "                'Gwinnett' ,'Rockingham' ,'Harford' ,'Sheridan' ,'Solano' ,'St. Tammany',\n",
        "                'Moore' ,'Ulster' ,'Sonoma' ,'Miami-Dade' ,'Currituck' ,'Wilson' ,'Tarrant',\n",
        "                'Charlottesville' ,'Newport News' ,'Napa' ,'Larimer' ,'Charles' ,'Hudson',\n",
        "                'Pulaski' ,'Yavapai' ,'Placer' ,'Coryell' ,'St. Louis' ,'Hardin' ,'Monterey',\n",
        "                'Shelby' ,'Elmore' ,'Richmond' ,'DuPage' ,'Essex' ,'Meade', 'Howard' ,'Cape May',\n",
        "                'Plaquemines' ,'Salt Lake' ,'Broward' ,'Berkeley' ,'Leavenworth' ,'Henrico',\n",
        "                'Beaufort' ,'Dorchester' ,'Charleston' ,'Mobile' ,'Escambia' ,'Anchorage',\n",
        "                'Galveston' ,'Washington' ,'Lane' ,'Collin' ,'Champaign' ,'Palm Beach',\n",
        "                'Boulder' ,'Allen' ,'Collier' ,'Arapahoe' ,'Middlesex' ,'Camden' ,'San Joaquin',\n",
        "                'Travis' ,'Randolph' ,'Sedgwick' ,'Kootenai' ,'Williamson' ,'Sarpy',\n",
        "                'Las Animas' ,'St. Clair' ,'Hennepin' ,'Maui' ,'Bell' ,'Portsmouth' ,'Suffolk']\n",
        "\n",
        "    car_makes = ['HYUNDAI','JEEP','TESLA' ,'BMW' ,'CHRYSLER' ,'FORD' ,'TOYOTA' ,'AUDI' ,'NISSAN',\n",
        " 'KIA','CHEVROLET','VOLKSWAGEN' ,'FIAT' ,'MINI' ,'SMART' ,'RIVIAN' ,'VOLVO',\n",
        " 'PORSCHE','HONDA' ,'MITSUBISHI' ,'SUBARU' ,'POLESTAR' ,'MERCEDES-BENZ',\n",
        " 'CADILLAC','JAGUAR','LINCOLN' ,'GENESIS' ,'LUCID' ,'LEXUS' ,'FISKER' ,'MAZDA',\n",
        " 'LAND ROVER','TH!NK','AZURE DYNAMICS' ,'ALFA ROMEO' ,'WHEEGO ELECTRIC CARS',\n",
        " 'BENTLEY']\n",
        "\n",
        "    kind_of_ev = [\"Battery Electric Vehicle\", \"Plug-in Hybrid Electric Vehicle\"]\n",
        "\n",
        "    Cafv =  ['Clean Alternative Fuel Vehicle Eligible',\n",
        "       'Not eligible due to low battery range',\n",
        "       'Eligibility unknown as battery range has not been researched']\n",
        "\n",
        "##Creating dictionary to map strings to integers\n",
        "county_dict = {county: i for i, county in enumerate(counties)}\n",
        "car_makes_dict = {make: i for i, make in enumerate(car_makes)}\n",
        "ev_dict = {ev_type: i for i, ev_type in enumerate(kind_of_ev)}\n",
        "cafv_dict = {cafv_eligibility: i for i, cafv_eligibility in enumerate(Cafv)}\n",
        "\n",
        "##Streamlit App title\n",
        "st.title(\"Electric Range Predictor\")\n",
        "st.write(\"This app predicts the range of an Electric Vehicle (EV) based on input features.\")\n",
        "\n",
        "\n",
        "## Input fields for features\n",
        "selected_county = st.selectbox(\"County:\", counties)\n",
        "selected_make = st.selectbox(\"Make:\", car_makes)\n",
        "selected_ev_type = st.selectbox(\"EV Type\", kind_of_ev)\n",
        "selected_cafv_eligibility = st.selectbox(\"CAFV Eligibility\", Cafv)\n",
        "\n",
        "county_index = county_dict[selected_county]\n",
        "make_index = car_makes_dict[selected_make]\n",
        "ev_type_index = ev_dict[selected_ev_type]\n",
        "cafv_eligibility_index = cafv_dict[selected_cafv_eligibility]\n",
        "\n",
        "##Button to predict\n",
        "calc_button = st.button(\"Calculate\")\n",
        "\n",
        "# Function to make predictions\n",
        "def predict_range(county_idx, make_idx, ev_type_idx, cafv_eligibility_idx):\n",
        "    # Scale input features\n",
        "    X = np.array([[county_idx, make_idx, ev_type_idx, cafv_eligibility_idx]])\n",
        "    X_scaled = scaler.transform(X)\n",
        "\n",
        "    # Make prediction\n",
        "    prediction = models.predict(X_scaled)\n",
        "\n",
        "    return prediction[0]\n",
        "\n",
        "# Display prediction when button is clicked\n",
        "if calc_button:\n",
        "    prediction = predict_range(county_index, make_index, ev_type_index, cafv_eligibility_index)\n",
        "    st.balloons()\n",
        "    st.write(f\"Predicted electric range: {prediction} miles\")\n",
        "\n",
        "else:\n",
        "    st.write(\"Please enter the values and press the calculate button\")\n"
      ]
    }
  ]
}